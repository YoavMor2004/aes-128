# Cadence Genus(TM) Synthesis Solution, Version 21.15-s080_1, built Sep 23 2022 12:57:55

# Date: Tue Sep 02 17:54:27 2025
# Host: ip-10-70-173-86.il-central-1.compute.internal (x86_64 w/Linux 4.14.355-275.570.amzn2.x86_64) (1core*2cpus*1physical cpu*Intel(R) Xeon(R) Platinum 8375C CPU @ 2.90GHz 55296KB)
# OS:   CentOS Linux release 7.9.2009 (Core)

set design(TOPLEVEL) "aes_128"
set debug_file "debug.txt"
set runtype "synthesis"
set combinational 1
set mmmc_or_simple "simple"; # "simple" - using "read_libs"
set phys_synth_type "lef";   # "none"   - don't read any physical data
source ../scripts/procedures.tcl -quiet
enics_start_stage "start"
source ../inputs/$design(TOPLEVEL).defines -quiet
source ../inputs/libraries.$TECHNOLOGY.tcl -quiet
source ../inputs/libraries.$SC_TECHNOLOGY.tcl -quiet
source ../inputs/libraries.$SRAM_TECHNOLOGY.tcl -quiet
if {$design(FULLCHIP_OR_MACRO)=="FULLCHIP"} {
    source ../inputs/libraries.$IO_TECHNOLOGY.tcl -quiet
}
set df [open $debug_file a]
puts $df "\n******************************************"
puts $df "* Debug values after everything was loaded *"
puts $df "******************************************"
foreach dic {paths tech tech_files design} {
    foreach key [array names $dic] {
        puts $df "${dic}(${key}) = \t[set ${dic}([set key])]"
    }
}
close $df
set_db source_verbose true ; # Sourcing files will be reported as verbose
set_db information_level 9 ; # The log file will report everything
suppress_messages "PHYS-90"
enics_start_stage "init_design"
if {$mmmc_or_simple=="mmmc"} {
    read_mmmc $design(mmmc_view_file)
} else {
    set_db init_lib_search_path $paths(LIB_paths) 
    suppress_messages $tech(SC_LIB_SUPPRESS_MESSAGES_GENUS)
    read_libs $tech_files(ALL_WC_LIBS)
}
suppress_messages "LBR-415"
if {$phys_synth_type == "none"} {
   enics_message "Physical Synthesis is disabled"
   read_qrc $tech_files(QRCTECH_FILE_WC)
} else {
    suppress_messages $tech(SC_LEF_SUPPRESS_MESSAGES_GENUS)
    read_physical -lef $tech_files(ALL_LEFS)
    if {$phys_synth_type == "floorplan"} { 
        # You need to read a .def file for the floorplan to enable physical synthesis 
        read_def $design(floorplan_def)
    }
}
enics_start_stage "read_rtl"
set_db init_hdl_search_path $design(hdl_search_paths)
set_db hdl_language v2001 -quiet
suppress_messages "CDFG-250"
suppress_messages "CWD-19 CWD-36"
suppress_messages "CDFG-771"
read_hdl -language sv -f $design(read_hdl_list)
enics_start_stage "elaborate"
set_db hdl_track_filename_row_col true -quiet; # helps with debug
set_db lp_insert_clock_gating true
elaborate $design(TOPLEVEL) ;#-update
enics_start_stage "post_elaboration"
check_design -unresolved
check_design -all > $design(synthesis_reports)/post_elaboration/check_design_post_elab.rpt
if {[check_design -status]} {
    Puts "ENICSINFO: ############# There is an issue with check_design. You better look at it! ###########"
}
write_design -base_name $design(export_dir)/post_elaboartion/$design(TOPLEVEL)
set_db detailed_sdc_messages true ; # helps read_sdc debug
read_sdc $design(functional_sdc) -stop_on_errors
check_timing_intent
check_timing_intent -verbose > $design(synthesis_reports)/post_elaboration/check_timing_post_elab.rpt
if $combinational {
    combinational_default_cost_groups
} else {
    enics_default_cost_groups
}
enics_report_timing $design(synthesis_reports)
set_db [get_db design:$design(TOPLEVEL)] .lp_clock_gating_min_flops 8
set_db [get_db design:$design(TOPLEVEL)] .lp_clock_gating_style latch
enics_start_stage "synthesis"
set_db syn_generic_effort low
set_db syn_map_effort low
set_db syn_opt_effort low
suppress_messages "ST-110 ST-112"
if {$phys_synth_type == "floorplan"} {
    # Synthesize to generics and place generics in floorplan
    enics_start_stage "syn_generic"
    syn_generic -physical
    # Map to technology
    enics_start_stage "technology_mapping"
    syn_map -physical
    enics_report_timing $design(synthesis_reports) 
    # Post synthesis optimization
    enics_start_stage "post_syn_opt"
    syn_opt -physical
} else {
    # Synthesize to generics (non physical-aware)
    enics_start_stage "syn_generic"
    syn_generic 
    # Map to technology (non physical-aware)
    enics_start_stage "technology_mapping"
    syn_map 
    enics_report_timing $design(synthesis_reports)
    enics_start_stage "post_syn_opt"
    if {$phys_synth_type == "lef"} {
        syn_opt ;#-physical
    } else {
        syn_opt 
    }
}
enics_report_timing $design(synthesis_reports)
set post_synth_reports [list \
    report_area \
    report_gates \
    report_hierarchy \
    report_clock_gating \
    report_design_rules \
    report_dp \
    report_qor \
]
foreach rpt $post_synth_reports {
    enics_message "$rpt" medium
    $rpt
    $rpt > "$design(synthesis_reports)/post_opt/${rpt}.rpt"
}mkdir -p scripts inputs src/rtl \
         export/post_elaboration export/post_synth export/pwr/genus \
         outputs/reports/synthesis
cat > scripts/procedures.tcl <<'EOF'
proc enics_start_stage {name} { puts "=== STAGE: $name ===" }
proc enics_message {txt {lvl "info"}} { puts "ENICSINFO($lvl): $txt" }
proc enics_report_timing {rdir} {
  file mkdir $rdir
  report_timing -max_paths 10 > "$rdir/timing.rpt"
  report_qor                 > "$rdir/qor.rpt"
  report_area                > "$rdir/area.rpt"
}
proc enics_default_cost_groups {} {}
proc combinational_default_cost_groups {} {}
EOF
cat > inputs/aes_128.defines <<'EOF'
set TECHNOLOGY      "tsmc65"
set SC_TECHNOLOGY   "tsmc65"
set SRAM_TECHNOLOGY "tsmc65sram"
set IO_TECHNOLOGY   "tsmc65io"
set design(FULLCHIP_OR_MACRO)  "MACRO"
set design(hdl_search_paths)   [list ../src/rtl]
set design(read_hdl_list)      ../inputs/aes_128.f
set design(functional_sdc)     ../inputs/aes_128.sdc
set design(synthesis_reports)  ../outputs/reports/synthesis
set design(export_dir)         ../export
file mkdir $design(synthesis_reports)
file mkdir "$design(synthesis_reports)/post_elaboration"
file mkdir "$design(synthesis_reports)/post_opt"
file mkdir "$design(export_dir)/post_elaboration"
file mkdir "$design(export_dir)/post_synth"
file mkdir "$design(export_dir)/pwr/genus"
set design(floorplan_def)      ../inputs/floorplan.def
set design(postsyn_netlist)    "$design(export_dir)/post_synth/${design(TOPLEVEL)}.v"
EOF
exit
